var webpack = require('webpack');

module.exports = function(grunt) {
    require('load-grunt-tasks')(grunt);

    var bannerComment = '<%= pkg.description%> version <%= pkg.version %>\n'
                      + 'Copyright <%= pkg.author.name%> <<%= pkg.author.email %>>\n'
                      + 'Published: <%= grunt.template.today("yyyy-mm-dd") %>\n'
                      + '\n'
                      + 'Please visit http://cdn.mutualofomaha.com/design-guide/3/toolkit/getting-started/\n'
                      + 'For changes across versions, please refer to\n'
                      + '    http://cdn.mutualofomaha.com/design-guide/3/toolkit/CHANGELOG.md';

    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),
        config: grunt.file.readJSON('config.json'),

        copy: {
            css: {
                src:'README.md',
                dest: 'dist/assets/css/README.md'
            },
            js: {
                src: 'README.md',
                dest: 'dist/assets/js/README.md'
            }
        },
        watch: {
            css: {
                files: ['src/**/*.css'],
                tasks: ['css']
            },
            js: {
                files: ['src/**/*.js'],
                tasks: ['js']
            }
        },
        sass: {
            compile: {
                options: {
                    includePaths: ['./scss']
                },
                files: {
                    'dist/assets/css/scss_screen.css': './src/index.scss',
                    'dist/assets/css/scss_style.css': './src/index.scss'
                }
            }
        },
        sassify: {
            options: {
                regex: /^moo+(\-component|\-base|\-utility|\-theme)/i,
                prefix: 'moo-'
            }
        },
        postcss: {
            options: {
                bannerComment: {
                    changelogUrl: 'http://cdn.mutualofomaha.com/design-guide/3/toolkit/CHANGELOG.md',
                    description: '<%= pkg.description %>',
                    owner: '<%= pkg.author.name %> <<%= pkg.author.email %>>',
                    version: '<%= pkg.version %>',
                    pubDate: '<%= grunt.template.today("yyyy-mm-dd") %>'
                },
                bemLinter: true,
                browsers: [
                    'Last 2 versions',
                    'IE >= 9'
                ],
                compress: true,
                importOpts: {
                    path: './src'
                }
            },
            css: {
                files: {
                    'dist/assets/css/screen.css': ['./src/index.css'],
                    'dist/assets/css/style.css': ['./src/index.css']
                }
            },
            sass: {
                options: {
                    compress: false
                },
                files: {
                    'dist/assets/css/scss_screen.css': ['dist/assets/css/scss_screen.css'],
                    'dist/assets/css/scss_style.css': ['dist/assets/css/scss_style.css']
                }
            },
            core: { // For SPA
                options: {
                    compress: true,
                    browsers: [
                        'Last 2 versions',
                        'IE >= 8'
                    ],
                    namespace: {
                        prefix: 'core-',
                        options: {
                            ignore: /^is\-/
                        }
                    }
                },
                files: {
                    'dist/assets/css/core.css': ['./src/index.css']
                }
            }
        },
        webpack: {
            compile: {
                entry: [
                    'expose?jQuery!jquery',
                    'expose?$!jquery',
                    './src/index.js'
                ],
                output: {
                    path: "dist/assets/javascripts",
                    filename: "scripts.js"
                },
                plugins: [
                    new webpack.ProvidePlugin({
                        $: 'jquery',
                        jQuery: 'jquery',
                        'window.jQuery': 'jquery',
                        'window.$': 'jquery'
                    }),
                    new webpack.optimize.DedupePlugin(),
                    new webpack.optimize.UglifyJsPlugin(),
                    new webpack.BannerPlugin(bannerComment)
                ]
            },
            dist: {
                entry: [
                    'expose?jQuery!jquery',
                    'expose?$!jquery',
                    './src/index.js'
                ],
                output: {
                    path: "dist/assets/javascripts",
                    filename: "scripts.min.js"
                },
                plugins: [
                    new webpack.ProvidePlugin({
                        $: 'jquery',
                        jQuery: 'jquery',
                        'window.jQuery': 'jquery'
                    }),
                    new webpack.optimize.DedupePlugin(),
                    new webpack.optimize.UglifyJsPlugin(),
                    new webpack.BannerPlugin(bannerComment)
                ]
            }
        },
        rsync: {
            options: {
                args: ["--verbose"],
                recursive: true
            },
            itgCss: {
                options: {
                    src: "dist/assets/css/*",
                    dest: "/Volumes/dav/cdn/css/corporate/<%= pkg.version %>/"
                }
            },
            itgJs: {
                options: {
                    src: "dist/assets/javascripts/*",
                    dest: "/Volumes/dav/cdn/js/corporate/<%= pkg.version %>/"
                }
            },
            localCss: {
                options: {
                    src: "dist/assets/css/*",
                    dest: "/data/http/cdn/css/corporate/<%= pkg.version %>/"
                }
            },
            localJs: {
                options: {
                    src: "dist/assets/javascripts/*",
                    dest: "/data/http/cdn/js/corporate/<%= pkg.version %>/"
                }
            }
        },
        'sftp-deploy': {
            catCss: {
                auth: '<%= config.catAuth %>',
                src: '<%= config.cdnCss.src %>',
                dest: '<%= config.cdnCss.dest %>',
                progress: true
            },
            prod1Css: {
                auth: '<%= config.prod1Auth %>',
                src: '<%= config.cdnCss.src %>',
                dest: '<%= config.cdnCss.dest %>',
                progress: true
            },
            prod2Css: {
                auth: '<%= config.prod2Auth %>',
                src: '<%= config.cdnCss.src %>',
                dest: '<%= config.cdnCss.dest %>',
                progress: true
            },
            catJs: {
                auth: '<%= config.catAuth %>',
                src: '<%= config.cdnJs.src %>',
                dest: '<%= config.cdnJs.dest %>',
                progress: true
            },
            prod1Js: {
                auth: '<%= config.prod1Auth %>',
                src: '<%= config.cdnJs.src %>',
                dest: '<%= config.cdnJs.dest %>',
                progress: true
            },
            prod2Js: {
                auth: '<%= config.prod2Auth %>',
                src: '<%= config.cdnJs.src %>',
                dest: '<%= config.cdnJs.dest %>',
                progress: true
            }
        }
    });

    grunt.registerTask('default', ['compile']);
    grunt.registerTask('scss', ['sassify', 'sass']);
    grunt.registerTask('css', ['postcss', 'copy:css']);
    grunt.registerTask('compile', ['scss', 'postcss', 'webpack']);

    grunt.registerTask('deploy', function(target) {
        var latest = grunt.option('latest'),
            tasks;

        if (!target) {
            grunt.fail.fatal('deploy target must be specified, like deploy:prod1.');
        }

        if (latest) {
            grunt.config.set('pkg.version', '3.x');
        }

        tasks = (['local', 'itg'].indexOf(target) > -1) ? ['rsync'] : ['sftp-deploy'];

        grunt.task.run('compile'); // Make sure everything's compiled as expected

        grunt.task.run.apply(grunt.task, tasks.map(function(task) {
            return task + ':' + target + 'Css';
        }));

        grunt.task.run.apply(grunt.task, tasks.map(function(task) {
            return task + ':' + target + 'Js';
        }));
    });
};
