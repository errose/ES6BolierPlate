
// Converted Variables


// Custom Media Query Variables


/**
 * Vertical alignment utilities
 * Depends on an appropriate `display` value.
 */

.u-alignBaseline {
  vertical-align: baseline !important;
}

.u-alignBottom {
  vertical-align: bottom !important;
}

.u-alignMiddle {
  vertical-align: middle !important;
}

.u-alignTop {
  vertical-align: top !important;
}
/**
 * Display-type utilities
 */

.u-block {
  display: block !important;
}

.u-hidden {
  display: none !important;
}

/**
 * Completely remove from the flow but leave available to screen readers.
 */

.u-hiddenVisually {
  position: absolute !important;
  overflow: hidden !important;
  width: 1px !important;
  height: 1px !important;
  padding: 0 !important;
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
}

.u-inline {
  display: inline !important;
}

/**
 * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
 * inline-block will display at its default size, and not limit its width to
 * 100% of an ancestral container.
 */

.u-inlineBlock {
  display: inline-block !important;
  max-width: 100%; /* 1 */
}

.u-table {
  display: table !important;
}

.u-tableCell {
  display: table-cell !important;
}

.u-tableRow {
  display: table-row !important;
}
/**
 * Contain floats
 *
 * Make an element expand to contain floated children.
 * Uses pseudo-elements (micro clearfix).
 *
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of the
 *    element.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */

.u-cf:before,
.u-cf:after {
  content: " "; /* 1 */
  display: table; /* 2 */
}

.u-cf:after {
  clear: both;
}

/**
 * New block formatting context
 *
 * This affords some useful properties to the element. It won't wrap under
 * floats. Will also contain any floated children.

 * N.B. This will clip overflow. Use the alternative method below if this is
 * problematic.
 */

.u-nbfc {
  overflow: hidden !important;
}

/**
 * New block formatting context (alternative)
 *
 * Alternative method when overflow must not be clipped.
 *
 * 1. Create a new block formatting context (NBFC).
 * 2. Avoid shrink-wrap behaviour of table-cell.
 *
 * N.B. This breaks down in some browsers when elements within this element
 * exceed its width.
 */

.u-nbfcAlt {
  display: table-cell !important; /* 1 */
  width: 10000px !important; /* 2 */
}

/**
 * Floats
 */

.u-floatLeft {
  float: left !important;
}

.u-floatRight {
  float: right !important;
}
.u-posAbsolute {
  position: absolute !important;
}

/**
 * Pins to all corners by default. But when a width and/or height are
 * provided, the element will be centered in its nearest relatively-positioned
 * ancestor.
 */

.u-posAbsoluteCenter {
  bottom: 0 !important;
  left: 0 !important;
  margin: auto !important;
  position: absolute !important;
  right: 0 !important;
  top: 0 !important;
}

/**
 * 1. Make sure fixed elements are promoted into a new layer, for performance
 *    reasons.
 */

.u-posFixed {
  position: fixed !important;
  backface-visibility: hidden; /* 1 */
}

.u-posRelative {
  position: relative !important;
}

.u-posStatic {
  position: static !important;
}
.u-opacity9 { opacity: 0.9; }
.u-opacity8 { opacity: 0.8; }
.u-opacity7 { opacity: 0.7; }
.u-opacity6 { opacity: 0.6; }
.u-opacity5 { opacity: 0.5; }
.u-opacity4 { opacity: 0.4; }
.u-opacity3 { opacity: 0.3; }
.u-opacity2 { opacity: 0.2; }
.u-opacity1 { opacity: 0.1; }
.u-opacity0 { opacity: 0; }

.u-rounded { border-radius: $border-radius-small; }

.u-floatNone { float: none!important; }
/**
 * Display: breakpoint a (small)
 */

@media #{$sm-viewport} {

  .u-sm-block { display: block !important; }

  .u-sm-hidden { display: none !important; }

  /**
   * Completely remove from the flow but leave available to screen readers.
   */

  .u-sm-hiddenVisually {
    position: absolute !important;
    overflow: hidden !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
  }

  .u-sm-inline { display: inline !important; }

  /**
   * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
   * inline-block will display at its default size, and not limit its width to
   * 100% of an ancestral container.
   */

  .u-sm-inlineBlock {
    display: inline-block !important;
    max-width: 100%; /* 1 */
  }

  .u-sm-table { display: table !important; }
  .u-sm-tableCell { display: table-cell !important; }
  .u-sm-tableRow { display: table-row !important; }

  .u-sm-floatLeft { float: left !important; }
  .u-sm-floatRight { float: right !important; }
  .u-sm-floatNone { float: none !important; }
}
/**
 * Display: breakpoint 2 (medium)
 */

@media #{$md-viewport} {

  .u-md-block { display: block !important; }

  .u-md-hidden { display: none !important; }

  /**
   * Completely remove from the flow but leave available to screen readers.
   */

  .u-md-hiddenVisually {
    position: absolute !important;
    overflow: hidden !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
  }

  .u-md-inline { display: inline !important; }

  /**
   * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
   * inline-block will display at its default size, and not limit its width to
   * 100% of an ancestral container.
   */

  .u-md-inlineBlock {
    display: inline-block !important;
    max-width: 100%; /* 1 */
  }

  .u-md-table { display: table !important; }
  .u-md-tableCell { display: table-cell !important; }
  .u-md-tableRow { display: table-row !important; }

  .u-md-floatLeft { float: left !important; }
  .u-md-floatRight { float: right !important; }
  .u-md-floatNone { float: none!important; }
}
/**
 * Display: breakpoint 3 (large)
 */

@media #{$lg-viewport} {

  .u-lg-block { display: block !important; }

  .u-lg-hidden { display: none !important; }

  /**
   * Completely remove from the flow but leave available to screen readers.
   */

  .u-lg-hiddenVisually {
    position: absolute !important;
    overflow: hidden !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    border: 0 !important;
    clip: rect(1px, 1px, 1px, 1px) !important;
  }

  .u-lg-inline { display: inline !important; }

  /**
   * 1. Fix for Firefox bug: an image styled `max-width:100%` within an
   * inline-block will display at its default size, and not limit its width to
   * 100% of an ancestral container.
   */

  .u-lg-inlineBlock {
    display: inline-block !important;
    max-width: 100%; /* 1 */
  }

  .u-lg-table {   display: table !important; }
  .u-lg-tableCell { display: table-cell !important; }
  .u-lg-tableRow { display: table-row !important; }

  .u-lg-floatLeft { float: left !important; }
  .u-lg-floatRight { float: right !important; }
  .u-lg-floatNone { float: none!important; }

}