var $ = require('jquery');

var Form = (function(){

  var form = {};

  form.init = function(){
    var self = this;
    $(document).ready(function(){
      /* Set Disabled and Checked Classes */
      self.setInitialState();

      /* Radio & Checkbox Buttons */
      $('.Radio--button, .Checkbox--button').on('change', function() {
        var $input = $(this).find('input[type=checkbox], input[type=radio]'),
            inputType = $input.attr('type');

        if (inputType === 'radio') {
          handleRadios($input);
        } else {
          setChecked($input);
        }
      });

      /* Select Dropdown, Control */
      $('.Field.is-invalid select').each(function () {

        this.selectDefaultValue = this.value;

        $(this).on('change', function () {
          var selectActiveValue = this.value,
              valuesMatch = this.selectDefaultValue === selectActiveValue;

          $(this).closest('.Field').toggleClass('is-invalid', valuesMatch).toggleClass('is-valid', !valuesMatch);
        });

      });

      /* Input Field, Control */
      var inputErrorValue = '';

      $('.Field.is-invalid .Input').on('focus', function () {

        this.inputInitialValue = this.value;

        if (this.inputInitialValue == inputErrorValue) {
          changeValidity($(this));
        }

      }).on('blur', function () {

        this.inputUpdatedValue = this.value;

        if (this.inputUpdatedValue == inputErrorValue) {
          changeValidity($(this));
        }

      });

      /* Input Addon Focus/Blur */
      $('.Field-addonBox .Input').on('focus', function () {
        $(this).closest('.Field').addClass('is-focused');
      }).on('blur', function () {
        $(this).closest('.Field').removeClass('is-focused');
      });

      /* Input Addon Padding */
      self.setInputPadding();
    })
    /* Invalid Input List, Control */
    .on('click', '.Checkbox--button', function() {
       var $Field = $(this).closest('.Field');
       if($Field.is('.is-invalid')){
        changeValidity($(this));
       }
       else if ($Field.is('.is-valid')){
         var selectedItems = $Field.find('.Checkbox--button.is-checked').length;

         if (selectedItems < 1){
           changeValidity($(this));
         }
       }
    });
  };

  form.setInitialState = function(){
    var $disabled = $('input:disabled, select:disabled, textarea:disabled');
    var $checked = $('input:checked');

    $disabled.closest('.Field').addClass('is-disabled');
    $checked.closest('.Radio, .Checkbox').addClass('is-checked');
  };

  form.setInputPadding = function(){
    $('.Field-addonBox .Input').each(function() {
      var inputPrepend = $(this).prev('.Field-addon'),
          inputAppend = $(this).next('.Field-addon');

      var extraPadding = parseFloat($(this).siblings('.Field-addon').css('padding-right')),
          inputSeperation = extraPadding ? extraPadding : 0;

      if (inputPrepend.length > 0) {
        $(this).css({'padding-left': parseFloat(inputPrepend.outerWidth()) + inputSeperation });
      }

      if (inputAppend.length > 0) {
        $(this).css({'padding-right': parseFloat(inputAppend.outerWidth()) + inputSeperation });
      }
    });
  };

  var handleRadios = function ($trigger) {
    var name = $trigger.attr('name'),
        $radios = $('input[name="' + name + '"]');

    $radios.each(function () {
      setChecked($(this));
    });
  };

  var setChecked = function ($input) {
    var $label = $input.closest('.Radio--button, .Checkbox--button'),
        isChecked = $input.is(':checked'),
        activeClass = 'is-checked';

    $label.toggleClass(activeClass, isChecked);
  };

  var changeValidity = function($this){
    $this.closest('.Field').toggleClass('is-valid is-invalid');
  };

  return form;

})();

module.exports = Form;
